'''
uc3m
Bachelor Thesis: Machine Learning-Based Predictive Modeling of Energy Prices
Author: Rodrigo De Lama Fernández
Professor: Emilio Parrado

Date: 2024-11-27
File: code/metrics/ta_metrics.py
'''

import pandas as pd
import ta  # Technical Analysis Library
import numpy as np

# Load the processed data
data_path = 'data/processed_data.csv'
df = pd.read_csv(data_path, parse_dates=['Datetime']) # df means DataFrame

# Filter data for a specific hour (e.g., 14:00) to a new DataFrame (df_hour)
hour_to_predict = 14
df_hour = df[df['Datetime'].dt.hour == hour_to_predict].copy() # df_hour means DataFrame for the selected hour

# No need already sorted but MAYBE ??
# Sort data by date to ensure proper chronological order
# df_hour = df_hour.sort_values(by='Datetime')

# Rolling window
rw = 3

'''
1. Simple Moving Average (SMA)
    A basic moving average for energy prices (daily or hourly). We can compute SMAs for different window lengths
    (e.g., 5-day, 7-day, 10-day, or 20-day) to smooth out price fluctuations

2. Exponential Moving Average (EMA): Similar to SMA but gives more weight to recent prices. This could be valuable
    to capture more immediate trends in energy prices

3. Bollinger Bands
	Bands based on a moving average (SMA or EMA) that measure volatility. They will allow you to observe how energy
    prices behave within a “normal” range and identify periods of high volatility, which could be linked to
    demand/supply fluctuations
    (usually measured with 2 standard deviations)

4. Price Rate of Change (ROC)
	The ROC measures the percentage change between the current price and a price from a previous time period
    (e.g., 1 day, 7 days ago). It helps identify momentum in the market and is useful to highlight trends or
    sudden shifts in energy prices

    Not really relevant ??
    In energy there is no such thing as overbought or oversold conditions, so idk if its actually useful
5. Relative Strength Index (RSI)
	A momentum indicator that can identify overbought or oversold conditions in the energy market. You can use
    it to track whether the price is approaching extreme values, which could indicate a reversal
'''

# Using 'ta' library to calculate metrics
# 1. Simple Moving Average (SMA)
df_hour[f'SMA_{rw}'] = ta.trend.SMAIndicator(close=df_hour['MarginalES'], window=rw).sma_indicator() # f means formatted string

# 2. Exponential Moving Average (EMA)
df_hour[f'EMA_{rw}'] = ta.trend.EMAIndicator(close=df_hour['MarginalES'], window=rw).ema_indicator()

# 3. Bollinger Bands (N-day window, 2 standard deviations)
bb_indicator = ta.volatility.BollingerBands(close=df_hour['MarginalES'], window=rw, window_dev=2)
df_hour['BB_Upper'] = bb_indicator.bollinger_hband()
df_hour['BB_Middle'] = bb_indicator.bollinger_mavg()
df_hour['BB_Lower'] = bb_indicator.bollinger_lband()

# 4. Rate of Change (ROC, over N days)
df_hour[f'ROC_{rw}'] = ta.momentum.ROCIndicator(close=df_hour['MarginalES'], window=rw).roc()

# 5. Relative Strength Index (RSI, N-day window)
df_hour[f'RSI_{rw}'] = ta.momentum.RSIIndicator(close=df_hour['MarginalES'], window=rw).rsi()

# Drop missing values generated by rolling calculations
df_hour.dropna(inplace=True)

# Check for NaN or infinity values
print("NaN values per column:\n", df_hour.isna().sum())
print("Infinity values per column:\n", df_hour.isin([np.inf, -np.inf]).sum())

# Replace NaN or infinity values with the mean or median
df_hour = df_hour.replace([np.inf, -np.inf], np.nan).fillna(df_hour.mean())

# Save the dataset with metrics for the selected hour
df_hour.to_csv(f'data/ta_metrics/metrics_hour_{hour_to_predict}_rw_{rw}.csv', index=False)

# Output message
print(f"Metrics for hour {hour_to_predict} calculated and saved to 'data/ta_metrics/metrics_hour_{hour_to_predict}_rw_{rw}.csv'.")
