{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "21211cf7",
   "metadata": {},
   "outputs": [
    {
     "ename": "FileNotFoundError",
     "evalue": "[Errno 2] No such file or directory: '.../data/ta_metrics/new_price_metrics_hour_14.csv'",
     "output_type": "error",
     "traceback": [
      "\u001b[31m---------------------------------------------------------------------------\u001b[39m",
      "\u001b[31mFileNotFoundError\u001b[39m                         Traceback (most recent call last)",
      "\u001b[36mCell\u001b[39m\u001b[36m \u001b[39m\u001b[32mIn[1]\u001b[39m\u001b[32m, line 109\u001b[39m\n\u001b[32m    107\u001b[39m \u001b[38;5;66;03m# Load and prepare your data\u001b[39;00m\n\u001b[32m    108\u001b[39m csv_hour_file = \u001b[33m'\u001b[39m\u001b[33m.../data/ta_metrics/new_price_metrics_hour_14.csv\u001b[39m\u001b[33m'\u001b[39m\n\u001b[32m--> \u001b[39m\u001b[32m109\u001b[39m df = \u001b[43mpd\u001b[49m\u001b[43m.\u001b[49m\u001b[43mread_csv\u001b[49m\u001b[43m(\u001b[49m\u001b[43mcsv_hour_file\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mparse_dates\u001b[49m\u001b[43m=\u001b[49m\u001b[43m[\u001b[49m\u001b[33;43m'\u001b[39;49m\u001b[33;43mDatetime\u001b[39;49m\u001b[33;43m'\u001b[39;49m\u001b[43m]\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    111\u001b[39m \u001b[38;5;66;03m# Feature engineering\u001b[39;00m\n\u001b[32m    112\u001b[39m lag_price_window = \u001b[32m3\u001b[39m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Library/Mobile Documents/com~apple~CloudDocs/uc3m/TFG/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1026\u001b[39m, in \u001b[36mread_csv\u001b[39m\u001b[34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, date_format, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options, dtype_backend)\u001b[39m\n\u001b[32m   1013\u001b[39m kwds_defaults = _refine_defaults_read(\n\u001b[32m   1014\u001b[39m     dialect,\n\u001b[32m   1015\u001b[39m     delimiter,\n\u001b[32m   (...)\u001b[39m\u001b[32m   1022\u001b[39m     dtype_backend=dtype_backend,\n\u001b[32m   1023\u001b[39m )\n\u001b[32m   1024\u001b[39m kwds.update(kwds_defaults)\n\u001b[32m-> \u001b[39m\u001b[32m1026\u001b[39m \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43m_read\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Library/Mobile Documents/com~apple~CloudDocs/uc3m/TFG/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:620\u001b[39m, in \u001b[36m_read\u001b[39m\u001b[34m(filepath_or_buffer, kwds)\u001b[39m\n\u001b[32m    617\u001b[39m _validate_names(kwds.get(\u001b[33m\"\u001b[39m\u001b[33mnames\u001b[39m\u001b[33m\"\u001b[39m, \u001b[38;5;28;01mNone\u001b[39;00m))\n\u001b[32m    619\u001b[39m \u001b[38;5;66;03m# Create the parser.\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m620\u001b[39m parser = \u001b[43mTextFileReader\u001b[49m\u001b[43m(\u001b[49m\u001b[43mfilepath_or_buffer\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43m*\u001b[49m\u001b[43m*\u001b[49m\u001b[43mkwds\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    622\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m chunksize \u001b[38;5;129;01mor\u001b[39;00m iterator:\n\u001b[32m    623\u001b[39m     \u001b[38;5;28;01mreturn\u001b[39;00m parser\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Library/Mobile Documents/com~apple~CloudDocs/uc3m/TFG/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1620\u001b[39m, in \u001b[36mTextFileReader.__init__\u001b[39m\u001b[34m(self, f, engine, **kwds)\u001b[39m\n\u001b[32m   1617\u001b[39m     \u001b[38;5;28mself\u001b[39m.options[\u001b[33m\"\u001b[39m\u001b[33mhas_index_names\u001b[39m\u001b[33m\"\u001b[39m] = kwds[\u001b[33m\"\u001b[39m\u001b[33mhas_index_names\u001b[39m\u001b[33m\"\u001b[39m]\n\u001b[32m   1619\u001b[39m \u001b[38;5;28mself\u001b[39m.handles: IOHandles | \u001b[38;5;28;01mNone\u001b[39;00m = \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m-> \u001b[39m\u001b[32m1620\u001b[39m \u001b[38;5;28mself\u001b[39m._engine = \u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43m_make_engine\u001b[49m\u001b[43m(\u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43mengine\u001b[49m\u001b[43m)\u001b[49m\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Library/Mobile Documents/com~apple~CloudDocs/uc3m/TFG/.venv/lib/python3.11/site-packages/pandas/io/parsers/readers.py:1880\u001b[39m, in \u001b[36mTextFileReader._make_engine\u001b[39m\u001b[34m(self, f, engine)\u001b[39m\n\u001b[32m   1878\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m mode:\n\u001b[32m   1879\u001b[39m         mode += \u001b[33m\"\u001b[39m\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m\n\u001b[32m-> \u001b[39m\u001b[32m1880\u001b[39m \u001b[38;5;28mself\u001b[39m.handles = \u001b[43mget_handle\u001b[49m\u001b[43m(\u001b[49m\n\u001b[32m   1881\u001b[39m \u001b[43m    \u001b[49m\u001b[43mf\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1882\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1883\u001b[39m \u001b[43m    \u001b[49m\u001b[43mencoding\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mencoding\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1884\u001b[39m \u001b[43m    \u001b[49m\u001b[43mcompression\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mcompression\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1885\u001b[39m \u001b[43m    \u001b[49m\u001b[43mmemory_map\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mmemory_map\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mFalse\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1886\u001b[39m \u001b[43m    \u001b[49m\u001b[43mis_text\u001b[49m\u001b[43m=\u001b[49m\u001b[43mis_text\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1887\u001b[39m \u001b[43m    \u001b[49m\u001b[43merrors\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mencoding_errors\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mstrict\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1888\u001b[39m \u001b[43m    \u001b[49m\u001b[43mstorage_options\u001b[49m\u001b[43m=\u001b[49m\u001b[38;5;28;43mself\u001b[39;49m\u001b[43m.\u001b[49m\u001b[43moptions\u001b[49m\u001b[43m.\u001b[49m\u001b[43mget\u001b[49m\u001b[43m(\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43mstorage_options\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;28;43;01mNone\u001b[39;49;00m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m   1889\u001b[39m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m   1890\u001b[39m \u001b[38;5;28;01massert\u001b[39;00m \u001b[38;5;28mself\u001b[39m.handles \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m\n\u001b[32m   1891\u001b[39m f = \u001b[38;5;28mself\u001b[39m.handles.handle\n",
      "\u001b[36mFile \u001b[39m\u001b[32m~/Library/Mobile Documents/com~apple~CloudDocs/uc3m/TFG/.venv/lib/python3.11/site-packages/pandas/io/common.py:873\u001b[39m, in \u001b[36mget_handle\u001b[39m\u001b[34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)\u001b[39m\n\u001b[32m    868\u001b[39m \u001b[38;5;28;01melif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(handle, \u001b[38;5;28mstr\u001b[39m):\n\u001b[32m    869\u001b[39m     \u001b[38;5;66;03m# Check whether the filename is to be opened in binary mode.\u001b[39;00m\n\u001b[32m    870\u001b[39m     \u001b[38;5;66;03m# Binary mode does not support 'encoding' and 'newline'.\u001b[39;00m\n\u001b[32m    871\u001b[39m     \u001b[38;5;28;01mif\u001b[39;00m ioargs.encoding \u001b[38;5;129;01mand\u001b[39;00m \u001b[33m\"\u001b[39m\u001b[33mb\u001b[39m\u001b[33m\"\u001b[39m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;129;01min\u001b[39;00m ioargs.mode:\n\u001b[32m    872\u001b[39m         \u001b[38;5;66;03m# Encoding\u001b[39;00m\n\u001b[32m--> \u001b[39m\u001b[32m873\u001b[39m         handle = \u001b[38;5;28;43mopen\u001b[39;49m\u001b[43m(\u001b[49m\n\u001b[32m    874\u001b[39m \u001b[43m            \u001b[49m\u001b[43mhandle\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    875\u001b[39m \u001b[43m            \u001b[49m\u001b[43mioargs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mmode\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    876\u001b[39m \u001b[43m            \u001b[49m\u001b[43mencoding\u001b[49m\u001b[43m=\u001b[49m\u001b[43mioargs\u001b[49m\u001b[43m.\u001b[49m\u001b[43mencoding\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    877\u001b[39m \u001b[43m            \u001b[49m\u001b[43merrors\u001b[49m\u001b[43m=\u001b[49m\u001b[43merrors\u001b[49m\u001b[43m,\u001b[49m\n\u001b[32m    878\u001b[39m \u001b[43m            \u001b[49m\u001b[43mnewline\u001b[49m\u001b[43m=\u001b[49m\u001b[33;43m\"\u001b[39;49m\u001b[33;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\n\u001b[32m    879\u001b[39m \u001b[43m        \u001b[49m\u001b[43m)\u001b[49m\n\u001b[32m    880\u001b[39m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[32m    881\u001b[39m         \u001b[38;5;66;03m# Binary mode\u001b[39;00m\n\u001b[32m    882\u001b[39m         handle = \u001b[38;5;28mopen\u001b[39m(handle, ioargs.mode)\n",
      "\u001b[31mFileNotFoundError\u001b[39m: [Errno 2] No such file or directory: '.../data/ta_metrics/new_price_metrics_hour_14.csv'"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
    "from utils.matrix_builder import create_feature_matrix_with_features\n",
    "\n",
    "def adaptive_learning_pipeline(df, lag_price_window, training_window_size, \n",
    "                             initial_train_size, step_size=1, alpha=0.1):\n",
    "    \"\"\"\n",
    "    Implements adaptive learning with sliding window approach.\n",
    "    \n",
    "    Parameters:\n",
    "    -----------\n",
    "    df : pandas.DataFrame\n",
    "        Full dataset with Datetime and features\n",
    "    lag_price_window : int\n",
    "        Number of historical price points as features (lag window)\n",
    "    training_window_size : int\n",
    "        Number of samples to use for each model training (sliding window)\n",
    "    initial_train_size : int\n",
    "        Size of initial training set before starting predictions\n",
    "    step_size : int\n",
    "        How many samples to move forward between retraining\n",
    "    alpha : float\n",
    "        Lasso regularization parameter\n",
    "        \n",
    "    Returns:\n",
    "    --------\n",
    "    results : dict\n",
    "        Dictionary containing predictions, actual values, metrics, etc.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Create full feature matrix once\n",
    "    X_full, y_full = create_feature_matrix_with_features(df, lag_price_window)\n",
    "    \n",
    "    # Initialize storage for results\n",
    "    predictions = []\n",
    "    actual_values = []\n",
    "    model_performances = []\n",
    "    training_indices = []\n",
    "    \n",
    "    # Start predictions after initial training period\n",
    "    start_idx = initial_train_size\n",
    "    \n",
    "    print(f\"Starting adaptive learning:\")\n",
    "    print(f\"- Total samples available: {len(X_full)}\")\n",
    "    print(f\"- Training window size: {training_window_size}\")\n",
    "    print(f\"- Initial training size: {initial_train_size}\")\n",
    "    print(f\"- Starting predictions from index: {start_idx}\")\n",
    "    \n",
    "    # Adaptive learning loop\n",
    "    for i in range(start_idx, len(X_full), step_size):\n",
    "        \n",
    "        # Define training window (sliding window of most recent data)\n",
    "        train_end_idx = i\n",
    "        train_start_idx = max(0, train_end_idx - training_window_size)\n",
    "        \n",
    "        # Extract training data for this window\n",
    "        X_train = X_full.iloc[train_start_idx:train_end_idx]\n",
    "        y_train = y_full.iloc[train_start_idx:train_end_idx]\n",
    "        \n",
    "        # Train model on current window\n",
    "        model = Lasso(alpha=alpha)\n",
    "        model.fit(X_train, y_train)\n",
    "        \n",
    "        # Make prediction for next point(s)\n",
    "        pred_end_idx = min(i + step_size, len(X_full))\n",
    "        X_pred = X_full.iloc[i:pred_end_idx]\n",
    "        y_actual = y_full.iloc[i:pred_end_idx]\n",
    "        \n",
    "        y_pred = model.predict(X_pred)\n",
    "        \n",
    "        # Store results\n",
    "        predictions.extend(y_pred)\n",
    "        actual_values.extend(y_actual.values)\n",
    "        training_indices.append((train_start_idx, train_end_idx))\n",
    "        \n",
    "        # Calculate performance on training window (optional)\n",
    "        train_pred = model.predict(X_train)\n",
    "        train_mse = mean_squared_error(y_train, train_pred)\n",
    "        model_performances.append(train_mse)\n",
    "        \n",
    "        if (i - start_idx) % 50 == 0:  # Progress update\n",
    "            print(f\"Processed {i - start_idx + step_size} predictions...\")\n",
    "    \n",
    "    # Calculate overall performance\n",
    "    predictions = np.array(predictions)\n",
    "    actual_values = np.array(actual_values)\n",
    "    \n",
    "    overall_mse = mean_squared_error(actual_values, predictions)\n",
    "    overall_mae = mean_absolute_error(actual_values, predictions)\n",
    "    overall_r2 = r2_score(actual_values, predictions)\n",
    "    \n",
    "    results = {\n",
    "        'predictions': predictions,\n",
    "        'actual_values': actual_values,\n",
    "        'model_performances': model_performances,\n",
    "        'training_indices': training_indices,\n",
    "        'overall_mse': overall_mse,\n",
    "        'overall_mae': overall_mae,\n",
    "        'overall_r2': overall_r2,\n",
    "        'n_models_trained': len(model_performances)\n",
    "    }\n",
    "    \n",
    "    return results\n",
    "\n",
    "# Load and prepare your data\n",
    "csv_hour_file = '.../data/ta_metrics/new_price_metrics_hour_14.csv'\n",
    "df = pd.read_csv(csv_hour_file, parse_dates=['Datetime'])\n",
    "\n",
    "# Feature engineering\n",
    "lag_price_window = 3\n",
    "feature_columns = df.columns[1:]\n",
    "df = df[['Datetime'] + list(feature_columns)]\n",
    "df['day_of_week'] = df['Datetime'].dt.dayofweek\n",
    "df['month'] = df['Datetime'].dt.month\n",
    "df['is_weekend'] = df['day_of_week'].isin([5, 6]).astype(int)\n",
    "\n",
    "# Filter date range\n",
    "train_start_date = '2018-12-25'\n",
    "train_end_date = '2019-02-01'\n",
    "train_subset_df = df[(df['Datetime'] >= train_start_date) & (df['Datetime'] <= train_end_date)]\n",
    "\n",
    "# Adaptive learning parameters\n",
    "training_window_size = 100  # Number of samples per training window\n",
    "initial_train_size = 150    # Initial training before starting predictions\n",
    "step_size = 1              # Retrain every N samples (1 = every sample)\n",
    "\n",
    "# Run adaptive learning\n",
    "results = adaptive_learning_pipeline(\n",
    "    df=train_subset_df,\n",
    "    lag_price_window=lag_price_window,\n",
    "    training_window_size=training_window_size,\n",
    "    initial_train_size=initial_train_size,\n",
    "    step_size=step_size,\n",
    "    alpha=0.1\n",
    ")\n",
    "\n",
    "# Print results\n",
    "print(f\"\\nAdaptive Learning Results:\")\n",
    "print(f\"Total predictions made: {len(results['predictions'])}\")\n",
    "print(f\"Models trained: {results['n_models_trained']}\")\n",
    "print(f\"Overall MSE: {results['overall_mse']:.4f}\")\n",
    "print(f\"Overall MAE: {results['overall_mae']:.4f}\")\n",
    "print(f\"Overall R²: {results['overall_r2']:.4f}\")\n",
    "\n",
    "# Optional: Compare with static approach\n",
    "print(f\"\\nComparing with static training...\")\n",
    "X_static, y_static = create_feature_matrix_with_features(train_subset_df, lag_price_window)\n",
    "split_point = int(len(X_static) * 0.5)\n",
    "X_train_static = X_static.iloc[:split_point]\n",
    "X_test_static = X_static.iloc[split_point:]\n",
    "y_train_static = y_static.iloc[:split_point]\n",
    "y_test_static = y_static.iloc[split_point:]\n",
    "\n",
    "lasso_static = Lasso(alpha=0.1)\n",
    "lasso_static.fit(X_train_static, y_train_static)\n",
    "y_pred_static = lasso_static.predict(X_test_static)\n",
    "\n",
    "static_mse = mean_squared_error(y_test_static, y_pred_static)\n",
    "static_mae = mean_absolute_error(y_test_static, y_pred_static)\n",
    "static_r2 = r2_score(y_test_static, y_pred_static)\n",
    "\n",
    "print(f\"Static MSE: {static_mse:.4f}\")\n",
    "print(f\"Static MAE: {static_mae:.4f}\")\n",
    "print(f\"Static R²: {static_r2:.4f}\")\n",
    "\n",
    "print(f\"\\nImprovement with adaptive learning:\")\n",
    "print(f\"MSE improvement: {((static_mse - results['overall_mse']) / static_mse * 100):.2f}%\")\n",
    "print(f\"MAE improvement: {((static_mae - results['overall_mae']) / static_mae * 100):.2f}%\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
